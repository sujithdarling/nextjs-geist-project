{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/youtube-feed/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { parseString } from 'xml2js';\nimport { YouTubeVideo, YouTubeFeedResponse } from '@/types/youtube';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const channelId = searchParams.get('channelId') || 'UC_x5XG1OV2P6uZZ5FSM9Ttw'; // Default to Google Developers channel\n    \n    const rssUrl = `https://www.youtube.com/feeds/videos.xml?channel_id=${channelId}`;\n    \n    const response = await fetch(rssUrl);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch RSS feed: ${response.statusText}`);\n    }\n    \n    const xmlData = await response.text();\n    \n    return new Promise<NextResponse>((resolve) => {\n      parseString(xmlData, (err, result) => {\n        if (err) {\n          console.error('XML parsing error:', err);\n          resolve(NextResponse.json(\n            { videos: [], error: 'Failed to parse RSS feed' } as YouTubeFeedResponse,\n            { status: 500 }\n          ));\n          return;\n        }\n        \n        try {\n          const entries = result?.feed?.entry || [];\n          const videos: YouTubeVideo[] = entries.map((entry: any) => {\n            const videoId = entry['yt:videoId']?.[0] || '';\n            return {\n              id: videoId,\n              title: entry.title?.[0] || 'Untitled Video',\n              description: entry['media:group']?.[0]?.['media:description']?.[0] || 'No description available',\n              publishedAt: entry.published?.[0] || '',\n              thumbnail: `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`,\n              channelTitle: entry.author?.[0]?.name?.[0] || 'Unknown Channel'\n            };\n          });\n          \n          resolve(NextResponse.json({ videos } as YouTubeFeedResponse));\n        } catch (parseError) {\n          console.error('Data processing error:', parseError);\n          resolve(NextResponse.json(\n            { videos: [], error: 'Failed to process video data' } as YouTubeFeedResponse,\n            { status: 500 }\n          ));\n        }\n      });\n    });\n    \n  } catch (error) {\n    console.error('API route error:', error);\n    return NextResponse.json(\n      { videos: [], error: 'Internal server error' } as YouTubeFeedResponse,\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAGO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,YAAY,aAAa,GAAG,CAAC,gBAAgB,4BAA4B,uCAAuC;QAEtH,MAAM,SAAS,CAAC,oDAAoD,EAAE,WAAW;QAEjF,MAAM,WAAW,MAAM,MAAM;QAC7B,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,0BAA0B,EAAE,SAAS,UAAU,EAAE;QACpE;QAEA,MAAM,UAAU,MAAM,SAAS,IAAI;QAEnC,OAAO,IAAI,QAAsB,CAAC;YAChC,CAAA,GAAA,yIAAA,CAAA,cAAW,AAAD,EAAE,SAAS,CAAC,KAAK;gBACzB,IAAI,KAAK;oBACP,QAAQ,KAAK,CAAC,sBAAsB;oBACpC,QAAQ,gIAAA,CAAA,eAAY,CAAC,IAAI,CACvB;wBAAE,QAAQ,EAAE;wBAAE,OAAO;oBAA2B,GAChD;wBAAE,QAAQ;oBAAI;oBAEhB;gBACF;gBAEA,IAAI;oBACF,MAAM,UAAU,QAAQ,MAAM,SAAS,EAAE;oBACzC,MAAM,SAAyB,QAAQ,GAAG,CAAC,CAAC;wBAC1C,MAAM,UAAU,KAAK,CAAC,aAAa,EAAE,CAAC,EAAE,IAAI;wBAC5C,OAAO;4BACL,IAAI;4BACJ,OAAO,MAAM,KAAK,EAAE,CAAC,EAAE,IAAI;4BAC3B,aAAa,KAAK,CAAC,cAAc,EAAE,CAAC,EAAE,EAAE,CAAC,oBAAoB,EAAE,CAAC,EAAE,IAAI;4BACtE,aAAa,MAAM,SAAS,EAAE,CAAC,EAAE,IAAI;4BACrC,WAAW,CAAC,2BAA2B,EAAE,QAAQ,cAAc,CAAC;4BAChE,cAAc,MAAM,MAAM,EAAE,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,IAAI;wBAChD;oBACF;oBAEA,QAAQ,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;wBAAE;oBAAO;gBACrC,EAAE,OAAO,YAAY;oBACnB,QAAQ,KAAK,CAAC,0BAA0B;oBACxC,QAAQ,gIAAA,CAAA,eAAY,CAAC,IAAI,CACvB;wBAAE,QAAQ,EAAE;wBAAE,OAAO;oBAA+B,GACpD;wBAAE,QAAQ;oBAAI;gBAElB;YACF;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oBAAoB;QAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,QAAQ,EAAE;YAAE,OAAO;QAAwB,GAC7C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}